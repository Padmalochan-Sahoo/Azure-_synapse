{
	"name": "xml_notebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9aa8ca8a-8c92-4f9e-ac76-916392616ae9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# XML Data type\r\n",
					"\r\n",
					"#python3\r\n",
					"\r\n",
					"import xml.etree.ElementTree as ET\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"data = ET.parse('/content/orchestra.xml')\r\n",
					"root = data.getroot()\r\n",
					"#root\r\n",
					"\r\n",
					"def xml_parse(element):\r\n",
					"  item = {}\r\n",
					"  for child in element:\r\n",
					"    if child.tag not in item:\r\n",
					"      item[child.tag]=[]\r\n",
					"    if list(child):\r\n",
					"      item[child.tag].append(xml_parse(child))\r\n",
					"    else:\r\n",
					"      item[child.tag]=child.text\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"  return item\r\n",
					"\r\n",
					"data_xml = [xml_parse(program) for program in root.findall('.//program')]\r\n",
					"\r\n",
					"df = pd.json_normalize(data_xml)\r\n",
					"df.head()"
				],
				"execution_count": null
			}
		]
	}
}